import React, { useState as t, useRef as r, useEffect as n } from"react"; import o from"prop-types"; let DatePicker=( { onChange:e=()=> {} , value: a, style:i, lang:l="default", format:u="DMY", start:d="monday", id:p="date-picker", className:c="date-picker" } )=> { DatePicker.propTypes= { onChange: o.func, value:o.string, style:o.object, lang:o.string, format:o.string, start:o.string, id:o.string, className:o.string } ; let[g, s]=t( !1), [$, _]=t(new Date().getFullYear()), [h, m]=t(new Date().getMonth()), [x, y]=t(0), [b, f]=t(0), w=r(null), k=r(null), C=r(null), v=["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"], D=v.indexOf(d.toLowerCase())||0; document.addEventListener("mousedown", e=> { g&&w.current&& !w.current.contains(e.target)&&s( !1) } ); let M=e=>e%4==0&&e%100 !=0||e%400==0; n(()=> { if(w.current) { let e=w.current.getBoundingClientRect(); e.bottom>window.innerHeight?f(0-e.height-C.current.offsetHeight-4): f(4) } } , [g]); let S=()=> { let e=C.current.getBoundingClientRect(); y(e.left), s( !0) } , T=e=> { let t=parseInt(e.target.value); _(t), A() } , B=()=> { k.current.value<k.current.min&&(k.current.value=k.current.min), k.current.value>k.current.max&&(k.current.value=k.current.max) } , L=()=>k.current.focus(), F=e=> { e.preventDefault(), setTimeout(()=> { 0===h?(m(11), _($-1)): m(h-1), A() } , 10) } , R=e=> { e.preventDefault(), setTimeout(()=> { 11===h?(m(0), _($+1)): m(h+1), A() } , 10) } , Y=()=> { let e=[]; for(let t=D; t<7+D; t++) { let r=new Date(0, 0, t%7).toLocaleDateString(l||void 0, { weekday: "short" } ), n=r.slice(0, -1); e.push(<span key= { t } style= { { display: "inline-block", width:"35px", textTransform:"capitalize", textAlign:"center" } } > { n } </span>) } return<div className="week-days"style= { { display: "grid", gridTemplateColumns:"repeat(7, 40px)" } } > { e } </div> } , E=t=> { t=t.toString().padStart(2, "0"); let r=(h+1).toString().padStart(2, "0"), n="MDY"===u?`$ { r } /$ { t } /$ { $ } `:"YMD"===u?`$ { $ } /$ { r } /$ { t } `:`$ { t } /$ { r } /$ { $ } `; C.current.value=n, e(n), s( !1) } , A=()=> { let e=31, t=31; [4, 6, 9, 11].includes(h+1)&&(e=30), [5, 7, 10, 12].includes(h+1)&&(t=30), h+1===2&&(e=M($)?29: 28), h+1===3&&(t=M($)?29:28); let r=new Date($, h, 7-D+1).getDay(), n=[]; for(let o=1; o<=r; o++) { let a=t-r+o; n.push(<button key= { "previousMonth-"+o } className="day-button previousMonth"style= { { width: "30px", border:"none", background:"none", color:"#CCC" } } onClick= { F } > { a } </button>) } for(let i=1; i<=e; i++)n.push(<button key= { "currentMonth-"+i } className="day-button currentMonth"style= { { width: "30px", border:"none", background:"none" } } onMouseDown= { ()=>E(i) } onMouseOver= { e=>e.target.style.background="#EEE" } onMouseOut= { e=>e.target.style.background="none" } > { i } </button>); for(let l=1; l<=42-e-r; l++)n.push(<button key= { "nextMonth"+l } className="day-button nextMonth"style= { { width: "30px", border:"none", background:"none", color:"#CCC" } } onMouseDown= { R } > { l } </button>); return<div className="month-days"style= { { display: "grid", gridTemplateColumns:"repeat(7, 40px)", gridTemplateRows:"repeat(6, 24px)", margin:"0 3px" } } > { n } </div> } ; return<React.Fragment><input id= { p } className= { c } style= { i } type="text"value= { a } ref= { C } onFocus= { S } onChange= { t=>e(t.target.value) } /><dialog id="popup"className="date-picker-popup"ref= { w } style= { { height:"190px", padding:"10px", paddingRight:"0", marginLeft:`$ { x } px`, marginTop:`$ { b } px`, backgroundColor:"#FFF", border:"1px solid #CCC", borderBottomColor:"#BBB", boxShadow:"0 5px 15px -5px rgba(0, 0, 0, 0.5)", display:g?"block":"none" } } > {} <div className="month-selector"style= { { display: "inline-block", textAlign:"center", marginLeft:"4px" } } ><button onClick= { F } > { "<" } </button><span style= { { display: "inline-block", width:"6rem", textTransform:"capitalize", textAlign:"center" } } > { new Date($, h).toLocaleString(l||void 0, { month: "long" } ) } </span><button onClick= { R } > { ">" } </button></div> {} <input type="number"ref= { k } min="1900"max= { new Date().getFullYear() } value= { $ } onChange= { T } onBlur= { B } onWheel= { L } style= { { width: "51px", marginRight:"16px", float:"right" } } /> { Y() } { A() } </dialog></React.Fragment> } ; export { DatePicker } ;